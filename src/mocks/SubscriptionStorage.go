// Code generated by mockery 2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/mikhailbolshakov/cryptocare/src/domain"
)

// SubscriptionStorage is an autogenerated mock type for the SubscriptionStorage type
type SubscriptionStorage struct {
	mock.Mock
}

// DeleteSubscription provides a mock function with given fields: ctx, subsId
func (_m *SubscriptionStorage) DeleteSubscription(ctx context.Context, subsId string) error {
	ret := _m.Called(ctx, subsId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, subsId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSubscription provides a mock function with given fields: ctx, subsId
func (_m *SubscriptionStorage) GetSubscription(ctx context.Context, subsId string) (*domain.Subscription, error) {
	ret := _m.Called(ctx, subsId)

	var r0 *domain.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Subscription); ok {
		r0 = rf(ctx, subsId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, subsId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveSubscription provides a mock function with given fields: ctx, subs
func (_m *SubscriptionStorage) SaveSubscription(ctx context.Context, subs *domain.Subscription) error {
	ret := _m.Called(ctx, subs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Subscription) error); ok {
		r0 = rf(ctx, subs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchSubscriptions provides a mock function with given fields: ctx, rq
func (_m *SubscriptionStorage) SearchSubscriptions(ctx context.Context, rq *domain.SearchSubscriptionsRequest) ([]*domain.Subscription, error) {
	ret := _m.Called(ctx, rq)

	var r0 []*domain.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, *domain.SearchSubscriptionsRequest) []*domain.Subscription); ok {
		r0 = rf(ctx, rq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.SearchSubscriptionsRequest) error); ok {
		r1 = rf(ctx, rq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSubscriptionStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewSubscriptionStorage creates a new instance of SubscriptionStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSubscriptionStorage(t mockConstructorTestingTNewSubscriptionStorage) *SubscriptionStorage {
	mock := &SubscriptionStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
