// Code generated by mockery 2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/mikhailbolshakov/cryptocare/src/domain"
)

// ChainStorage is an autogenerated mock type for the ChainStorage type
type ChainStorage struct {
	mock.Mock
}

// GetProfitableChain provides a mock function with given fields: ctx, chainId
func (_m *ChainStorage) GetProfitableChain(ctx context.Context, chainId string) (*domain.ProfitableChain, error) {
	ret := _m.Called(ctx, chainId)

	var r0 *domain.ProfitableChain
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.ProfitableChain); ok {
		r0 = rf(ctx, chainId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProfitableChain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, chainId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfitableChains provides a mock function with given fields: ctx, rq
func (_m *ChainStorage) GetProfitableChains(ctx context.Context, rq *domain.GetProfitableChainsRequest) (*domain.GetProfitableChainsResponse, error) {
	ret := _m.Called(ctx, rq)

	var r0 *domain.GetProfitableChainsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetProfitableChainsRequest) *domain.GetProfitableChainsResponse); ok {
		r0 = rf(ctx, rq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetProfitableChainsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetProfitableChainsRequest) error); ok {
		r1 = rf(ctx, rq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfitableChainExists provides a mock function with given fields: ctx, chainId
func (_m *ChainStorage) ProfitableChainExists(ctx context.Context, chainId string) (bool, error) {
	ret := _m.Called(ctx, chainId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, chainId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, chainId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveProfitableChains provides a mock function with given fields: ctx, chains
func (_m *ChainStorage) SaveProfitableChains(ctx context.Context, chains []*domain.ProfitableChain) error {
	ret := _m.Called(ctx, chains)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*domain.ProfitableChain) error); ok {
		r0 = rf(ctx, chains)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewChainStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewChainStorage creates a new instance of ChainStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChainStorage(t mockConstructorTestingTNewChainStorage) *ChainStorage {
	mock := &ChainStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
