// Code generated by mockery 2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/mikhailbolshakov/cryptocare/src/domain"
)

// BidStorage is an autogenerated mock type for the BidStorage type
type BidStorage struct {
	mock.Mock
}

// GetBidsByIds provides a mock function with given fields: ctx, ids
func (_m *BidStorage) GetBidsByIds(ctx context.Context, ids []string) ([]*domain.Bid, error) {
	ret := _m.Called(ctx, ids)

	var r0 []*domain.Bid
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*domain.Bid); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Bid)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBidsLightAll provides a mock function with given fields: ctx
func (_m *BidStorage) GetBidsLightAll(ctx context.Context) ([]*domain.BidLight, error) {
	ret := _m.Called(ctx)

	var r0 []*domain.BidLight
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.BidLight); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.BidLight)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutBids provides a mock function with given fields: ctx, bids, ttlSec
func (_m *BidStorage) PutBids(ctx context.Context, bids []*domain.Bid, ttlSec uint32) error {
	ret := _m.Called(ctx, bids, ttlSec)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*domain.Bid, uint32) error); ok {
		r0 = rf(ctx, bids, ttlSec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBidStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewBidStorage creates a new instance of BidStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBidStorage(t mockConstructorTestingTNewBidStorage) *BidStorage {
	mock := &BidStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
