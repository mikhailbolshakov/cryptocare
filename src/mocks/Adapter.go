// Code generated by mockery 2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	auth "github.com/mikhailbolshakov/cryptocare/src/kit/auth"

	domain "github.com/mikhailbolshakov/cryptocare/src/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Adapter is an autogenerated mock type for the Adapter type
type Adapter struct {
	mock.Mock
}

// Close provides a mock function with given fields: ctx
func (_m *Adapter) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSession provides a mock function with given fields: ctx, session
func (_m *Adapter) CreateSession(ctx context.Context, session *auth.Session) error {
	ret := _m.Called(ctx, session)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.Session) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, u
func (_m *Adapter) CreateUser(ctx context.Context, u *auth.User) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.User) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSubscription provides a mock function with given fields: ctx, subsId
func (_m *Adapter) DeleteSubscription(ctx context.Context, subsId string) error {
	ret := _m.Called(ctx, subsId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, subsId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: ctx, u
func (_m *Adapter) DeleteUser(ctx context.Context, u *auth.User) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.User) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, sid
func (_m *Adapter) Get(ctx context.Context, sid string) (*auth.Session, error) {
	ret := _m.Called(ctx, sid)

	var r0 *auth.Session
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.Session); ok {
		r0 = rf(ctx, sid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBidsByIds provides a mock function with given fields: ctx, ids
func (_m *Adapter) GetBidsByIds(ctx context.Context, ids []string) ([]*domain.Bid, error) {
	ret := _m.Called(ctx, ids)

	var r0 []*domain.Bid
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*domain.Bid); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Bid)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBidsLightAll provides a mock function with given fields: ctx
func (_m *Adapter) GetBidsLightAll(ctx context.Context) ([]*domain.BidLight, error) {
	ret := _m.Called(ctx)

	var r0 []*domain.BidLight
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.BidLight); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.BidLight)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUser provides a mock function with given fields: ctx, uid
func (_m *Adapter) GetByUser(ctx context.Context, uid string) ([]*auth.Session, error) {
	ret := _m.Called(ctx, uid)

	var r0 []*auth.Session
	if rf, ok := ret.Get(0).(func(context.Context, string) []*auth.Session); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*auth.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUsername provides a mock function with given fields: ctx, email
func (_m *Adapter) GetByUsername(ctx context.Context, email string) (*auth.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *auth.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfitableChain provides a mock function with given fields: ctx, chainId
func (_m *Adapter) GetProfitableChain(ctx context.Context, chainId string) (*domain.ProfitableChain, error) {
	ret := _m.Called(ctx, chainId)

	var r0 *domain.ProfitableChain
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.ProfitableChain); ok {
		r0 = rf(ctx, chainId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProfitableChain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, chainId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfitableChains provides a mock function with given fields: ctx, rq
func (_m *Adapter) GetProfitableChains(ctx context.Context, rq *domain.GetProfitableChainsRequest) (*domain.GetProfitableChainsResponse, error) {
	ret := _m.Called(ctx, rq)

	var r0 *domain.GetProfitableChainsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetProfitableChainsRequest) *domain.GetProfitableChainsResponse); ok {
		r0 = rf(ctx, rq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetProfitableChainsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetProfitableChainsRequest) error); ok {
		r1 = rf(ctx, rq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscription provides a mock function with given fields: ctx, subsId
func (_m *Adapter) GetSubscription(ctx context.Context, subsId string) (*domain.Subscription, error) {
	ret := _m.Called(ctx, subsId)

	var r0 *domain.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Subscription); ok {
		r0 = rf(ctx, subsId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, subsId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, userId
func (_m *Adapter) GetUser(ctx context.Context, userId string) (*auth.User, error) {
	ret := _m.Called(ctx, userId)

	var r0 *auth.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.User); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByIds provides a mock function with given fields: ctx, userIds
func (_m *Adapter) GetUserByIds(ctx context.Context, userIds []string) ([]*auth.User, error) {
	ret := _m.Called(ctx, userIds)

	var r0 []*auth.User
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*auth.User); ok {
		r0 = rf(ctx, userIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*auth.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, userIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: ctx, cfg
func (_m *Adapter) Init(ctx context.Context, cfg interface{}) error {
	ret := _m.Called(ctx, cfg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Logout provides a mock function with given fields: ctx, sid, logoutAt
func (_m *Adapter) Logout(ctx context.Context, sid string, logoutAt time.Time) error {
	ret := _m.Called(ctx, sid, logoutAt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = rf(ctx, sid, logoutAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProfitableChainExists provides a mock function with given fields: ctx, chainId
func (_m *Adapter) ProfitableChainExists(ctx context.Context, chainId string) (bool, error) {
	ret := _m.Called(ctx, chainId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, chainId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, chainId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutBids provides a mock function with given fields: ctx, bids, ttlSec
func (_m *Adapter) PutBids(ctx context.Context, bids []*domain.Bid, ttlSec uint32) error {
	ret := _m.Called(ctx, bids, ttlSec)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*domain.Bid, uint32) error); ok {
		r0 = rf(ctx, bids, ttlSec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveProfitableChains provides a mock function with given fields: ctx, chains
func (_m *Adapter) SaveProfitableChains(ctx context.Context, chains []*domain.ProfitableChain) error {
	ret := _m.Called(ctx, chains)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*domain.ProfitableChain) error); ok {
		r0 = rf(ctx, chains)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveSubscription provides a mock function with given fields: ctx, subs
func (_m *Adapter) SaveSubscription(ctx context.Context, subs *domain.Subscription) error {
	ret := _m.Called(ctx, subs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Subscription) error); ok {
		r0 = rf(ctx, subs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchSubscriptions provides a mock function with given fields: ctx, rq
func (_m *Adapter) SearchSubscriptions(ctx context.Context, rq *domain.SearchSubscriptionsRequest) ([]*domain.Subscription, error) {
	ret := _m.Called(ctx, rq)

	var r0 []*domain.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, *domain.SearchSubscriptionsRequest) []*domain.Subscription); ok {
		r0 = rf(ctx, rq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.SearchSubscriptionsRequest) error); ok {
		r1 = rf(ctx, rq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLastActivity provides a mock function with given fields: ctx, sid, lastActivity
func (_m *Adapter) UpdateLastActivity(ctx context.Context, sid string, lastActivity time.Time) error {
	ret := _m.Called(ctx, sid, lastActivity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = rf(ctx, sid, lastActivity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: ctx, u
func (_m *Adapter) UpdateUser(ctx context.Context, u *auth.User) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.User) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAdapter interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdapter creates a new instance of Adapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdapter(t mockConstructorTestingTNewAdapter) *Adapter {
	mock := &Adapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
