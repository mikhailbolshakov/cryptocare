// Code generated by mockery 2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	auth "github.com/mikhailbolshakov/cryptocare/src/kit/auth"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// SessionStorage is an autogenerated mock type for the SessionStorage type
type SessionStorage struct {
	mock.Mock
}

// CreateSession provides a mock function with given fields: ctx, session
func (_m *SessionStorage) CreateSession(ctx context.Context, session *auth.Session) error {
	ret := _m.Called(ctx, session)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.Session) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, sid
func (_m *SessionStorage) Get(ctx context.Context, sid string) (*auth.Session, error) {
	ret := _m.Called(ctx, sid)

	var r0 *auth.Session
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.Session); ok {
		r0 = rf(ctx, sid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUser provides a mock function with given fields: ctx, uid
func (_m *SessionStorage) GetByUser(ctx context.Context, uid string) ([]*auth.Session, error) {
	ret := _m.Called(ctx, uid)

	var r0 []*auth.Session
	if rf, ok := ret.Get(0).(func(context.Context, string) []*auth.Session); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*auth.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx, sid, logoutAt
func (_m *SessionStorage) Logout(ctx context.Context, sid string, logoutAt time.Time) error {
	ret := _m.Called(ctx, sid, logoutAt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = rf(ctx, sid, logoutAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLastActivity provides a mock function with given fields: ctx, sid, lastActivity
func (_m *SessionStorage) UpdateLastActivity(ctx context.Context, sid string, lastActivity time.Time) error {
	ret := _m.Called(ctx, sid, lastActivity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = rf(ctx, sid, lastActivity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSessionStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewSessionStorage creates a new instance of SessionStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSessionStorage(t mockConstructorTestingTNewSessionStorage) *SessionStorage {
	mock := &SessionStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
