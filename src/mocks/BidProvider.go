// Code generated by mockery 2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/mikhailbolshakov/cryptocare/src/domain"

	service "github.com/mikhailbolshakov/cryptocare/src/service"
)

// BidProvider is an autogenerated mock type for the BidProvider type
type BidProvider struct {
	mock.Mock
}

// GetAssets provides a mock function with given fields: ctx
func (_m *BidProvider) GetAssets(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBidLightsBySourceAsset provides a mock function with given fields: ctx, srcAsset
func (_m *BidProvider) GetBidLightsBySourceAsset(ctx context.Context, srcAsset string) ([]*domain.BidLight, error) {
	ret := _m.Called(ctx, srcAsset)

	var r0 []*domain.BidLight
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.BidLight); ok {
		r0 = rf(ctx, srcAsset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.BidLight)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, srcAsset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBidsByIds provides a mock function with given fields: ctx, ids
func (_m *BidProvider) GetBidsByIds(ctx context.Context, ids []string) ([]*domain.Bid, error) {
	ret := _m.Called(ctx, ids)

	var r0 []*domain.Bid
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*domain.Bid); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Bid)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: cfg
func (_m *BidProvider) Init(cfg *service.Config) {
	_m.Called(cfg)
}

// PutBid provides a mock function with given fields: ctx, bid
func (_m *BidProvider) PutBid(ctx context.Context, bid *domain.Bid) (*domain.Bid, error) {
	ret := _m.Called(ctx, bid)

	var r0 *domain.Bid
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Bid) *domain.Bid); ok {
		r0 = rf(ctx, bid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Bid)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Bid) error); ok {
		r1 = rf(ctx, bid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Run provides a mock function with given fields: ctx
func (_m *BidProvider) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields: ctx
func (_m *BidProvider) Stop(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBidProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewBidProvider creates a new instance of BidProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBidProvider(t mockConstructorTestingTNewBidProvider) *BidProvider {
	mock := &BidProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
