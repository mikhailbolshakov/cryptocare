// Code generated by mockery 2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/mikhailbolshakov/cryptocare/src/domain"

	service "github.com/mikhailbolshakov/cryptocare/src/service"
)

// SubscriptionService is an autogenerated mock type for the SubscriptionService type
type SubscriptionService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, subscription
func (_m *SubscriptionService) Create(ctx context.Context, subscription *domain.Subscription) (*domain.Subscription, error) {
	ret := _m.Called(ctx, subscription)

	var r0 *domain.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Subscription) *domain.Subscription); ok {
		r0 = rf(ctx, subscription)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Subscription) error); ok {
		r1 = rf(ctx, subscription)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Deactivate provides a mock function with given fields: ctx, subscriptionId
func (_m *SubscriptionService) Deactivate(ctx context.Context, subscriptionId string) (*domain.Subscription, error) {
	ret := _m.Called(ctx, subscriptionId)

	var r0 *domain.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Subscription); ok {
		r0 = rf(ctx, subscriptionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, subscriptionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, subscriptionId
func (_m *SubscriptionService) Delete(ctx context.Context, subscriptionId string) error {
	ret := _m.Called(ctx, subscriptionId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, subscriptionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, subscriptionId
func (_m *SubscriptionService) Get(ctx context.Context, subscriptionId string) (*domain.Subscription, error) {
	ret := _m.Called(ctx, subscriptionId)

	var r0 *domain.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Subscription); ok {
		r0 = rf(ctx, subscriptionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, subscriptionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: cfg
func (_m *SubscriptionService) Init(cfg *service.Config) {
	_m.Called(cfg)
}

// Notify provides a mock function with given fields: ctx, chains
func (_m *SubscriptionService) Notify(ctx context.Context, chains []*domain.ProfitableChain) error {
	ret := _m.Called(ctx, chains)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*domain.ProfitableChain) error); ok {
		r0 = rf(ctx, chains)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Search provides a mock function with given fields: ctx, rq
func (_m *SubscriptionService) Search(ctx context.Context, rq *domain.SearchSubscriptionsRequest) ([]*domain.Subscription, error) {
	ret := _m.Called(ctx, rq)

	var r0 []*domain.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, *domain.SearchSubscriptionsRequest) []*domain.Subscription); ok {
		r0 = rf(ctx, rq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.SearchSubscriptionsRequest) error); ok {
		r1 = rf(ctx, rq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, subscription
func (_m *SubscriptionService) Update(ctx context.Context, subscription *domain.Subscription) (*domain.Subscription, error) {
	ret := _m.Called(ctx, subscription)

	var r0 *domain.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Subscription) *domain.Subscription); ok {
		r0 = rf(ctx, subscription)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Subscription) error); ok {
		r1 = rf(ctx, subscription)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSubscriptionService interface {
	mock.TestingT
	Cleanup(func())
}

// NewSubscriptionService creates a new instance of SubscriptionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSubscriptionService(t mockConstructorTestingTNewSubscriptionService) *SubscriptionService {
	mock := &SubscriptionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
