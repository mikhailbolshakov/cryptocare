// Code generated by mockery 2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	aerospike "github.com/mikhailbolshakov/cryptocare/src/kit/storages/aerospike"

	log "github.com/mikhailbolshakov/cryptocare/src/kit/log"

	mock "github.com/stretchr/testify/mock"

	v6 "github.com/aerospike/aerospike-client-go/v6"
)

// Aerospike is an autogenerated mock type for the Aerospike type
type Aerospike struct {
	mock.Mock
}

// Close provides a mock function with given fields: ctx
func (_m *Aerospike) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetKey provides a mock function with given fields: ctx, key
func (_m *Aerospike) GetKey(ctx context.Context, key interface{}) (*v6.Key, error) {
	ret := _m.Called(ctx, key)

	var r0 *v6.Key
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *v6.Key); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v6.Key)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Instance provides a mock function with given fields:
func (_m *Aerospike) Instance() *v6.Client {
	ret := _m.Called()

	var r0 *v6.Client
	if rf, ok := ret.Get(0).(func() *v6.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v6.Client)
		}
	}

	return r0
}

// Open provides a mock function with given fields: ctx, cfg, logger
func (_m *Aerospike) Open(ctx context.Context, cfg *aerospike.Config, logger log.CLoggerFunc) error {
	ret := _m.Called(ctx, cfg, logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *aerospike.Config, log.CLoggerFunc) error); ok {
		r0 = rf(ctx, cfg, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reconnect provides a mock function with given fields: ctx
func (_m *Aerospike) Reconnect(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAerospike interface {
	mock.TestingT
	Cleanup(func())
}

// NewAerospike creates a new instance of Aerospike. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAerospike(t mockConstructorTestingTNewAerospike) *Aerospike {
	mock := &Aerospike{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
