// Code generated by mockery 2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/mikhailbolshakov/cryptocare/src/domain"
)

// TelegramNotifier is an autogenerated mock type for the TelegramNotifier type
type TelegramNotifier struct {
	mock.Mock
}

// Init provides a mock function with given fields: ctx
func (_m *TelegramNotifier) Init(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Notify provides a mock function with given fields: ctx, bot, channels, chains
func (_m *TelegramNotifier) Notify(ctx context.Context, bot string, channels []int, chains []*domain.ProfitableChain) error {
	ret := _m.Called(ctx, bot, channels, chains)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []int, []*domain.ProfitableChain) error); ok {
		r0 = rf(ctx, bot, channels, chains)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTelegramNotifier interface {
	mock.TestingT
	Cleanup(func())
}

// NewTelegramNotifier creates a new instance of TelegramNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTelegramNotifier(t mockConstructorTestingTNewTelegramNotifier) *TelegramNotifier {
	mock := &TelegramNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
