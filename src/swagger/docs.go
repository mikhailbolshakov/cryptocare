// Package swagger GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package swagger

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Api service support",
            "email": "support@cryptocare.io"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/arbitrage/bids": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscription"
                ],
                "summary": "allows creation or updating an exchange bid",
                "parameters": [
                    {
                        "description": "bid request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.BidRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.Bid"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Error"
                        }
                    }
                }
            }
        },
        "/arbitrage/chains": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "arbitrage"
                ],
                "summary": "retrieves profitable deal chains by criteria",
                "parameters": [
                    {
                        "type": "string",
                        "description": "comma separated list of assets",
                        "name": "assets",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "if chains are retrieved with bid info",
                        "name": "withBids",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.ProfitableChains"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Error"
                        }
                    }
                }
            }
        },
        "/arbitrage/chains/{chainId}/details": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "arbitrage"
                ],
                "summary": "retrieves profitable deal chain details by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "chain id",
                        "name": "chainId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.ProfitableChain"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Error"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "logins user by email/password",
                "parameters": [
                    {
                        "description": "auth request",
                        "name": "loginRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.LoginResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Error"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "logouts user",
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Error"
                        }
                    }
                }
            }
        },
        "/auth/password": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "sets a new password for the user",
                "parameters": [
                    {
                        "description": "set password request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.SetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Error"
                        }
                    }
                }
            }
        },
        "/auth/registration": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "registers a new client",
                "parameters": [
                    {
                        "description": "registration request",
                        "name": "regRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.ClientRegistrationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.ClientUser"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Error"
                        }
                    }
                }
            }
        },
        "/auth/token/refresh": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "refreshes auth token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.SessionToken"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Error"
                        }
                    }
                }
            }
        },
        "/ready": {
            "get": {
                "tags": [
                    "system"
                ],
                "summary": "check system is ready",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/users/{userId}/subscriptions": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscription"
                ],
                "summary": "retrieves user's subscriptions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.Subscriptions"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Error"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscription"
                ],
                "summary": "creates a new user subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "subscription request",
                        "name": "regRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.SubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.Subscription"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Error"
                        }
                    }
                }
            }
        },
        "/users/{userId}/subscriptions/{subscriptionId}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscription"
                ],
                "summary": "updates a subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "subscriptionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "subscription request",
                        "name": "regRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.SubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.Subscription"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "http.Bid": {
            "type": "object",
            "properties": {
                "available": {
                    "description": "Available - available volume",
                    "type": "number"
                },
                "exchangeCode": {
                    "description": "ExchangeCode - exchange code",
                    "type": "string"
                },
                "id": {
                    "description": "Id",
                    "type": "string"
                },
                "link": {
                    "description": "Link - link to the bid on the exchange",
                    "type": "string"
                },
                "maxLimit": {
                    "description": "MaxLimit - max limit",
                    "type": "number"
                },
                "methods": {
                    "description": "Methods - methods",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "minLimit": {
                    "description": "MinLimit - min limit",
                    "type": "number"
                },
                "rate": {
                    "description": "Rate - conversion rate",
                    "type": "number"
                },
                "src": {
                    "description": "SrcAsset - source asset",
                    "type": "string"
                },
                "trg": {
                    "description": "TrgAsset - target asset",
                    "type": "string"
                },
                "type": {
                    "description": "Type",
                    "type": "string"
                },
                "userId": {
                    "description": "UserId - user who exposes the bid",
                    "type": "string"
                }
            }
        },
        "http.BidRequest": {
            "type": "object",
            "properties": {
                "available": {
                    "description": "Available available volume",
                    "type": "number"
                },
                "exchangeCode": {
                    "description": "ExchangeCode - exchange code",
                    "type": "string"
                },
                "id": {
                    "description": "Id",
                    "type": "string"
                },
                "link": {
                    "description": "Link - link to the bid",
                    "type": "string"
                },
                "maxLimit": {
                    "description": "MaxLimit - max limit",
                    "type": "number"
                },
                "methods": {
                    "description": "Methods - methods",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "minLimit": {
                    "description": "MinLimit - minimum limit",
                    "type": "number"
                },
                "rate": {
                    "description": "Rate - conversion rate",
                    "type": "number"
                },
                "src": {
                    "description": "SrcAsset - source asset",
                    "type": "string"
                },
                "trg": {
                    "description": "TrgAsset - target asset",
                    "type": "string"
                },
                "userId": {
                    "description": "UserId - user who expose the bid",
                    "type": "string"
                }
            }
        },
        "http.ClientRegistrationRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Email - user's email",
                    "type": "string"
                },
                "firstName": {
                    "description": "FirstName - user's first name",
                    "type": "string"
                },
                "lastName": {
                    "description": "LastName - user's last name",
                    "type": "string"
                },
                "password": {
                    "description": "Password - password",
                    "type": "string"
                }
            }
        },
        "http.ClientUser": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Email - email",
                    "type": "string"
                },
                "firstName": {
                    "description": "FirstName - user's first name",
                    "type": "string"
                },
                "id": {
                    "description": "Id - user ID",
                    "type": "string"
                },
                "lastName": {
                    "description": "LastName - user's last name",
                    "type": "string"
                }
            }
        },
        "http.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Code is error code provided by error producer",
                    "type": "string"
                },
                "details": {
                    "description": "Details is additional info provided by error producer",
                    "type": "object",
                    "additionalProperties": true
                },
                "message": {
                    "description": "Message is error description",
                    "type": "string"
                },
                "translationKey": {
                    "description": "TranslationKey is error code translation key",
                    "type": "string"
                },
                "type": {
                    "description": "Type is error type (panic, system, business)",
                    "type": "string"
                }
            }
        },
        "http.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Email - login",
                    "type": "string"
                },
                "password": {
                    "description": "Password - password",
                    "type": "string"
                }
            }
        },
        "http.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "description": "Token - auth token must be passed as  \"Authorization Bearer\" header for all the requests (except ones which don't require authorization)",
                    "$ref": "#/definitions/http.SessionToken"
                },
                "userId": {
                    "description": "UserId - ID of account",
                    "type": "string"
                }
            }
        },
        "http.ProfitableChain": {
            "type": "object",
            "properties": {
                "asset": {
                    "description": "Asset - the target asset",
                    "type": "string"
                },
                "bidAssets": {
                    "description": "BidAssets sequence of asset for each bids like [RUB, USD, USDT]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "bids": {
                    "description": "Bids sequence of bids",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.Bid"
                    }
                },
                "createdAt": {
                    "description": "CreatedAt - when this chain has been created",
                    "type": "string"
                },
                "depth": {
                    "description": "Depth chain depth",
                    "type": "integer"
                },
                "exchangeCodes": {
                    "description": "ExchangeCodes through all bids",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "description": "Id - chain Id, calculated as hash from bidIds",
                    "type": "string"
                },
                "methods": {
                    "description": "Methods list of methods (union methods from all bids)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "profitShare": {
                    "description": "ProfitShare profit share",
                    "type": "number"
                }
            }
        },
        "http.ProfitableChains": {
            "type": "object",
            "properties": {
                "chains": {
                    "description": "Chains",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.ProfitableChain"
                    }
                }
            }
        },
        "http.SessionToken": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "description": "AccessToken",
                    "type": "string"
                },
                "accessTokenExpiresAt": {
                    "description": "AccessTokenExpiresAt - when access token expires",
                    "type": "string"
                },
                "refreshToken": {
                    "description": "RefreshToken",
                    "type": "string"
                },
                "refreshTokenExpiresAt": {
                    "description": "RefreshToken - when refresh token expires",
                    "type": "string"
                },
                "sessionId": {
                    "description": "SessionId - session ID",
                    "type": "string"
                }
            }
        },
        "http.SetPasswordRequest": {
            "type": "object",
            "properties": {
                "newPassword": {
                    "description": "NewPassword - new password",
                    "type": "string"
                },
                "prevPassword": {
                    "description": "PrevPassword - current password",
                    "type": "string"
                }
            }
        },
        "http.Subscription": {
            "type": "object",
            "properties": {
                "filter": {
                    "description": "Filter subscription filter",
                    "$ref": "#/definitions/http.SubscriptionChainFilter"
                },
                "id": {
                    "description": "Id subscription",
                    "type": "string"
                },
                "isActive": {
                    "description": "IsActive if subscription active",
                    "type": "boolean"
                },
                "notifications": {
                    "description": "Notifications notifications",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.SubscriptionNotification"
                    }
                },
                "userId": {
                    "description": "UserId owner of the subscription. Might be empty",
                    "type": "string"
                }
            }
        },
        "http.SubscriptionChainFilter": {
            "type": "object",
            "properties": {
                "assets": {
                    "description": "Assets filters by assets",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "exchanges": {
                    "description": "Exchanges filters by exchange codes",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "maxDepth": {
                    "description": "MaxDepth max depth of chains",
                    "type": "integer"
                },
                "methods": {
                    "description": "Methods filters by methods",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "minProfit": {
                    "description": "MinProfit min profit of chains",
                    "type": "number"
                }
            }
        },
        "http.SubscriptionNotification": {
            "type": "object",
            "properties": {
                "channel": {
                    "description": "Channel notification channel",
                    "type": "string"
                },
                "id": {
                    "description": "Id notification id",
                    "type": "string"
                },
                "isActive": {
                    "description": "IsActive if notification active",
                    "type": "boolean"
                },
                "telegram": {
                    "description": "Telegram telegram details",
                    "$ref": "#/definitions/http.SubscriptionTelegramNotificationDetails"
                }
            }
        },
        "http.SubscriptionNotificationRequest": {
            "type": "object",
            "properties": {
                "isActive": {
                    "type": "boolean"
                },
                "tgChannel": {
                    "type": "integer"
                }
            }
        },
        "http.SubscriptionRequest": {
            "type": "object",
            "properties": {
                "filter": {
                    "description": "Filter subscription filter",
                    "$ref": "#/definitions/http.SubscriptionChainFilter"
                },
                "notifications": {
                    "description": "Notifications notifications",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.SubscriptionNotificationRequest"
                    }
                }
            }
        },
        "http.SubscriptionTelegramNotificationDetails": {
            "type": "object",
            "properties": {
                "channel": {
                    "description": "Channel telegram channel",
                    "type": "integer"
                }
            }
        },
        "http.Subscriptions": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.Subscription"
                    }
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "/api",
	Schemes:     []string{},
	Title:       "CryptoCare API",
	Description: "CryptoCare service allows improving your arbitrage trading experience",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
